/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ChemicalStructureRendererPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings-tab.ts
var import_obsidian = require("obsidian");
var ChemicalStructureRendererSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Chemical Structure Renderer Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Width").setDesc("Set the width of the rendered structure (must be a number!)").addText((text) => text.setPlaceholder("Enter width").setValue(this.plugin.settings.width).onChange(async (value) => {
      this.plugin.settings.width = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Server").setDesc("Set the server to use for rendering").addText((text) => text.setPlaceholder("Enter server URL").setValue(this.plugin.settings.server).onChange(async (value) => {
      this.plugin.settings.server = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Image format").setDesc("Choose the format of the rendered image").addDropdown((dropdown) => {
      dropdown.addOption("image/svg;base64", "SVG").addOption("image/png;base64", "PNG").setValue(this.plugin.settings.format).onChange(async (value) => {
        this.plugin.settings.format = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  width: "300",
  server: "https://lifescience.opensource.epam.com",
  // EPAM's public Indigo service
  format: "image/svg;base64"
};
var ChemicalStructureRendererPlugin = class extends import_obsidian2.Plugin {
  /**
   * Fetches chemical structure image from rendering server
   * @param smiles Valid SMILES string to render
   * @returns Promise resolving to base64-encoded image data
   */
  async getImage(smiles) {
    try {
      const response = await (0, import_obsidian2.requestUrl)({
        url: this.settings.server + "/v2/indigo/render",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": this.settings.format
          // Server returns different format based on Accept header
        },
        body: JSON.stringify({
          struct: smiles,
          query: "",
          // Reserved for future search functionality
          output_format: this.settings.format,
          options: {}
          // Placeholder for future rendering options
        })
      });
      if (response.status >= 400) {
        let errorMsg = `Server error: ${response.status}`;
        try {
          const errorData = JSON.parse(response.text);
          errorMsg += ` - ${errorData.message || errorData.error}`;
        } catch (e) {
        }
        throw new Error(errorMsg);
      }
      return response.text;
    } catch (error) {
      throw new Error(`Rendering failed: ${error.message} (SMILES: ${smiles})`);
    }
  }
  /**
   * Renders SMILES string as image and appends to DOM element
   * @param smiles Input chemical structure notation
   * @param el Parent element to contain the image
   */
  async renderImage(smiles, el) {
    try {
      const imageData = await this.getImage(smiles);
      const imgEl = document.createElement("img");
      const mimeType = this.settings.format.replace(";base64", "+xml");
      imgEl.src = `data:${mimeType};base64,${imageData}`;
      imgEl.style.width = this.settings.width + "px";
      imgEl.classList.add("chemical-structure-image");
      el.appendChild(imgEl);
    } catch (error) {
      console.error(`Rendering Error: ${error}`);
      const errorContainer = document.createElement("div");
      errorContainer.classList.add("chemical-structure-error");
      const title = document.createElement("strong");
      title.textContent = "\u{1F6A8} Chemical Structure Rendering Error";
      const details = document.createElement("details");
      const summary = document.createElement("summary");
      summary.textContent = "Show error details";
      const pre = document.createElement("pre");
      pre.textContent = error.message;
      const code = document.createElement("code");
      code.textContent = `Problematic SMILES: ${smiles}`;
      details.append(summary, pre);
      errorContainer.append(title, details, code);
      el.appendChild(errorContainer);
    }
  }
  /**
   * Processes multi-line SMILES code blocks
   * @param text Raw content from code block
   * @param el Container element for all rendered structures
   */
  async renderImagesFromCodeBlock(text, el) {
    const smilesList = text.split("\n");
    const containerEl = document.createElement("div");
    containerEl.classList.add("chemical-structure-container");
    for (const smiles of smilesList) {
      if (smiles.trim() !== "") {
        await this.renderImage(smiles, containerEl);
      }
    }
    el.appendChild(containerEl);
  }
  /**
   * Plugin lifecycle hook - initializes core functionality
   */
  async onload() {
    console.log("loading Chemical Structure Renderer Plugin");
    await this.loadSettings();
    this.addSettingTab(new ChemicalStructureRendererSettingsTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("smiles", async (source, el, ctx) => {
      const smiles = source.trim();
      await this.renderImagesFromCodeBlock(smiles, el);
    });
    this.registerMarkdownPostProcessor(async (el, ctx) => {
      el.querySelectorAll("code.language-smiles").forEach(async (codeElement) => {
        const smiles = codeElement.textContent || "";
        await this.renderImagesFromCodeBlock(smiles, el);
      });
    });
  }
  onunload() {
    console.log("unloading Chemical Structure Renderer Plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */